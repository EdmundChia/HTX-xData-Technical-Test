import React, { useEffect, useState } from "react";
import ElasticsearchAPIConnector from "@elastic/search-ui-elasticsearch-connector";
import {
  SearchProvider,
  SearchBox,
  Facet,
  WithSearch
} from "@elastic/react-search-ui";
import {
  SearchBox as SearchBoxView,
  Facet as FacetView
} from "@elastic/react-search-ui";
import "@elastic/react-search-ui-views/lib/styles/styles.css";
import "./App.css";

const connector = new ElasticsearchAPIConnector({
  host: "http://localhost:9200",
  index: "cv-transcriptions",
  connectionOptions: {
    headers: {
      "Content-Type": "application/json",
      Authorization: "Basic " + btoa("elastic:aquila"),
    },
  },
});

const config = {
  apiConnector: connector,
  alwaysSearchOnInitialLoad: true,
  searchQuery: {
    search_fields: {
      generated_text: { weight: 3 },
      duration: { weight: 1 },
      age: { weight: 1 },
      gender: { weight: 1 },
      accent: { weight: 1 },
    },
    result_fields: {
      generated_text: { raw: {} },
      duration: { raw: {} },
      age: { raw: {} },
      gender: { raw: {} },
      accent: { raw: {} },
    },
    facets: {
      gender: { type: "value", field: "gender" },
      accent: { type: "value", field: "accent" },
      age: {
        type: "range",
        field: "age",
        ranges: [
          { from: 0, to: 20, name: "0-20" },
          { from: 21, to: 40, name: "21-40" },
          { from: 41, to: 60, name: "41-60" },
          { from: 61, name: "61+" }
        ]
      },
      duration: {
        type: "range",
        field: "duration",
        ranges: [
          { from: 0, to: 30, name: "0-30s" },
          { from: 31, to: 60, name: "31-60s" },
          { from: 61, to: 120, name: "61-120s" },
          { from: 121, name: "120s+" }
        ]
      }
    }
  },
};

function SearchResults({ results, error }) {
  if (error) {
    return <p>Error: {error.message}</p>;
  }

  if (!results) {
    return <p>Loading...</p>;
  }

  return (
    <ul className="results-list">
      {results.map((result, index) => (
        <li key={index} className="result-item">
          <p><strong>Generated Text:</strong> {result.generated_text?.raw || "No text available"}</p>
          <p><strong>Duration:</strong> {result.duration?.raw ? `${result.duration.raw}s` : "No duration available"}</p>
          <p><strong>Age:</strong> {result.age?.raw || "No age available"}</p>
          <p><strong>Gender:</strong> {result.gender?.raw || "No gender available"}</p>
          <p><strong>Accent:</strong> {result.accent?.raw || "No accent available"}</p>
        </li>
      ))}
    </ul>
  );
}

function App() {
  return (
    <SearchProvider config={config}>
      <WithSearch mapContextToProps={({ results, error }) => ({ results, error })}>
        {({ results, error }) => (
          <div className="search-container">
            <h1>Transcription Search</h1>
            
            <div className="search-layout">
              <div className="search-filters">
                <h3>Filters</h3>
                
                <div className="filter-section">
                  <h4>Gender</h4>
                  <Facet field="gender" label="Gender" view={FacetView} />
                </div>

                <div className="filter-section">
                  <h4>Accent</h4>
                  <Facet field="accent" label="Accent" view={FacetView} />
                </div>

                <div className="filter-section">
                  <h4>Age Range</h4>
                  <Facet field="age" label="Age" view={FacetView} />
                </div>

                <div className="filter-section">
                  <h4>Duration</h4>
                  <Facet field="duration" label="Duration" view={FacetView} />
                </div>
              </div>

              <div className="search-content">
                <SearchBox
                  view={SearchBoxView}
                  placeholder="Search transcriptions..."
                  autocompleteResults={false}
                  autocompleteSuggestions={false}
                  debounceLength={0}
                />
                
                <SearchResults results={results} error={error} />
              </div>
            </div>
          </div>
        )}
      </WithSearch>
    </SearchProvider>
  );
}

export default App;